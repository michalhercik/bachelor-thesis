import { Vector2, Rectangle, Text } from './rna/data-structures';
import { drawTexts, drawRectangle } from './draw';
var Title = /** @class */ (function () {
    function Title(texts, background, styles) {
        this.visible = false;
        this.texts = texts;
        this.background = background;
        this.styles = styles;
    }
    Title.prototype.getTexts = function () {
        return this.texts;
    };
    Title.prototype.getBackground = function () {
        return this.background;
    };
    Title.prototype.draw = function (ctx) {
        drawRectangle(this.background, ctx, this.styles);
        drawTexts(this.texts, ctx, this.styles);
    };
    Title.fromResidues = function (residues, canvasWidth, canvasHeight, styles) {
        var rightMostRes = Math.max.apply(Math, residues.map(function (res) { return res.getTransformedX(); }));
        var topMostRes = Math.min.apply(Math, residues.map(function (res) { return res.getTransformedY(); }));
        var margin = residues[0].circle.getScaledRadius();
        var padding = 3;
        var textHeight = +styles.getProperty(['title-text'], 'font-size').slice(0, -2);
        var x = rightMostRes + margin + padding;
        var y = topMostRes - margin + padding;
        var texts = residues
            .map(function (res, i) {
            var text = "".concat(res.index, ".").concat(res.name, " (position.label in template: ").concat(res.templateIndex, ".").concat(res.templateName, ")");
            return new Text(new Vector2(x, y + (i * textHeight)), text, ['title-text']);
        });
        var textWidth = Math.max.apply(Math, texts.map(function (t) { return t.width(styles); }));
        var titleWidth = textWidth + (2 * padding);
        var titleHeight = texts.length * textHeight + (2 * padding);
        var rectX = rightMostRes + margin;
        var rectY = topMostRes - margin;
        if (x + textWidth > canvasWidth) {
            var leftMostRes = Math.min.apply(Math, residues.map(function (res) { return res.getTransformedX(); }));
            x = leftMostRes - margin - padding - textWidth;
            texts.forEach(function (t) { return t.setX(x); });
            rectX = leftMostRes - margin - titleWidth;
        }
        if (y + titleHeight > canvasHeight) {
            var bottomMostRes = Math.max.apply(Math, residues.map(function (res) { return res.getTransformedY(); }));
            y = bottomMostRes - margin - titleHeight + padding;
            texts.forEach(function (t, i) { return t.setY(y + (i * textHeight)); });
            rectY = bottomMostRes - margin - titleHeight;
        }
        var background = new Rectangle(new Vector2(rectX, rectY), titleWidth, titleHeight, ['title-background']);
        return new Title(texts, background, styles);
    };
    return Title;
}());
export { Title };
//# sourceMappingURL=titlePresenter.js.map