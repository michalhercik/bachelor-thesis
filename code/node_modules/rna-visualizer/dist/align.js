var Group = /** @class */ (function () {
    function Group(x, y, member) {
        this.xShift = x;
        this.yShift = y;
        this.members = [member];
    }
    Group.prototype.push = function (member) {
        this.members.push(member);
    };
    Group.prototype.size = function () {
        return this.members.length;
    };
    Group.prototype.has = function (index) {
        return this.members.some(function (res) { return res.index === index; });
    };
    return Group;
}());
export { Group };
export function createGroups(contA, contB, group, filter) {
    if (group === void 0) { group = null; }
    if (filter === void 0) { filter = 5; }
    var tempRes = contA.residues;
    var shifts = new Map();
    contB.residues.forEach(function (res) {
        if (res.templateIndex !== -1 && (group === null || group.has(res.templateIndex))) {
            var tRes = tempRes[res.templateIndex];
            var x = Math.round(tRes.getX() - res.getX());
            var y = Math.round(tRes.getY() - res.getY());
            var key = x + "," + y;
            if (shifts.has(key)) {
                shifts.get(key).push(tRes);
            }
            else {
                shifts.set(key, new Group(x, y, tRes));
            }
        }
    });
    var groups = Array.from(shifts.values()).filter(function (group) { return group.size() > filter; });
    return groups;
}
export function getBestGroup(groups) {
    var bestGroup = groups[0];
    groups.forEach(function (group) {
        if (group.size() > bestGroup.size()) {
            bestGroup = group;
        }
    });
    return bestGroup;
}
//# sourceMappingURL=align.js.map