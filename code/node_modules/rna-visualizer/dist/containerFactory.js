import { Residue, BasePair, Label, Vector2, Line, Text } from './rna/data-structures';
import DataContainer from './dataContainer';
import { Styles } from './classes';
var ContainerFactory = /** @class */ (function () {
    function ContainerFactory() {
        this.margin = 10;
        this.residues = [];
        this.basePairs = [];
        this.labels = [];
    }
    ContainerFactory.prototype.create = function (data, styles) {
        this.data = data;
        this.styles = styles;
        this.addResidues();
        this.addBasePairs();
        this.addLabels();
        this.addMargin();
        this.container = new DataContainer(this.residues, this.basePairs, this.labels, styles);
        this.setDimensions();
        return this.container;
    };
    ContainerFactory.prototype.addMargin = function () {
        var shift = new Vector2(this.margin, this.margin);
        this.residues.forEach(function (res) {
            res.translate(shift);
        });
        this.labels.forEach(function (label) {
            label.translate(shift);
        });
    };
    ContainerFactory.prototype.setDimensions = function () {
        var residues = this.data.rnaComplexes[0].rnaMolecules[0].sequence;
        var width = Number.MIN_VALUE;
        var height = Number.MIN_VALUE;
        for (var _i = 0, residues_1 = residues; _i < residues_1.length; _i++) {
            var res = residues_1[_i];
            if (res.x > width)
                width = res.x;
            if (res.y > height)
                height = res.y;
        }
        this.container.width = Math.round(2 * this.margin + width);
        this.container.height = Math.round(2 * this.margin + height);
    };
    ContainerFactory.prototype.addClasses = function () {
        var _this = this;
        this.data.classes.forEach(function (style) {
            var name = style.name;
            delete style.name;
            _this.container.styles.set(name, style);
        });
    };
    ContainerFactory.prototype.addBasePairs = function () {
        var _this = this;
        var rna = this.data.rnaComplexes[0].rnaMolecules[0];
        rna.basePairs.forEach(function (bp) {
            var classes = Object.assign([], bp.classes);
            var basePair = new BasePair(_this.residues[bp.residueIndex1], _this.residues[bp.residueIndex2], classes);
            _this.basePairs.push(basePair);
        });
        for (var i = 1; i < this.residues.length; ++i) {
            var basePair = new BasePair(this.residues[i - 1], this.residues[i], ['bp-line', 'res-line']);
            this.basePairs.push(basePair);
        }
    };
    ContainerFactory.prototype.addResidues = function () {
        var _this = this;
        var sequenceData = this.data.rnaComplexes[0].rnaMolecules[0].sequence;
        sequenceData.forEach(function (res) {
            var residue = Residue.fromDataResidue(res, _this.styles);
            _this.residues.push(residue);
        });
    };
    ContainerFactory.prototype.addLabels = function () {
        var _this = this;
        var labelData = this.data.rnaComplexes[0].rnaMolecules[0].labels;
        labelData.forEach(function (label) {
            var coor1 = new Vector2(label.labelLine.x1, label.labelLine.y1);
            var coor2 = new Vector2(label.labelLine.x2, label.labelLine.y2);
            var lineClasses = Object.assign([], label.labelLine.classes);
            var line = new Line(coor1, coor2, lineClasses);
            var coor = new Vector2(label.labelContent.x, label.labelContent.y);
            var textClasses = Object.assign([], label.labelContent.classes);
            textClasses.push(Styles.TRANSFORMED_CLASS);
            var text = new Text(coor, label.labelContent.label, textClasses);
            var res = _this.residues[label.residueIndex];
            var l = new Label(res, line, text);
            _this.labels.push(l);
        });
    };
    return ContainerFactory;
}());
export default ContainerFactory;
//# sourceMappingURL=containerFactory.js.map