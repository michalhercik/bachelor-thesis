import { RnaVis } from '../rna-vis';
import { DataContainer } from '../data';
import { IAnimation, AfterFn } from '../animations';
import { PositionRecord } from '../components';
/**
 * An implementation of the IAnimation interface for translation animations.
 */
export declare class TranslationAnim implements IAnimation {
    container: DataContainer[];
    from: PositionRecord[];
    to: PositionRecord[];
    isActive: boolean[];
    private reversed;
    /**
     * Creates an instance of TranslationAnim.
     * @param container - An array of DataContainer instances to animate.
     * @param to - An array of PositionRecord instances that represent the final position of the containers.
     */
    constructor(container: DataContainer[], to: PositionRecord[]);
    /**
     * Returns true if the animation is currently reversed, false otherwise.
     * @returns True if the animation is currently reversed, false otherwise.
     */
    isReversed(): boolean;
    /**
     * Sets the active state of the containers.
     * @param isActive - An array of boolean values that represent the active state of the containers.
     */
    setState(isActive: boolean[]): void;
    /**
     * Returns an array of boolean values that represent the active state of the containers.
     * @returns An array of boolean values that represent the active state of the containers.
     */
    getState(): boolean[];
    /**
     * Changes the active state of a container at a specific index.
     * @param index - The index of the container to change the active state of.
     * @param isActive - The new active state of the container.
     */
    changeState(index: number, isActive: boolean): void;
    /**
     * Changes the active state of all containers to a specific value.
     * @param isActive - The new active state of all containers.
     */
    changeAllStates(isActive: boolean): void;
    /**
     * Updates the to array if the animation is reversed otherwise it updates from array using container.
     */
    updateFrom(): void;
    /**
     * Sets the from array to a new array of PositionRecord instances.
     * @param from - An array of PositionRecord instances to set the from array to.
     */
    setFrom(from: PositionRecord[]): void;
    /**
     * Perform a specified step of the animation
     * @param elapsed - A part of the animation to preform
     */
    do(elapsed: number): void;
    /**
     * Reverses the animation.
     */
    reverse(): void;
    /**
     * Preforms the Animation
     * @param rna - An instance of RnaVis to animate.
     * @param duration - The duration of the animation in milliseconds.
     * @param after - A callback function to execute after the animation has finished.
     */
    animate(rna: RnaVis, duration: number, after?: AfterFn): void;
    /**
     * Instantly and synchronously completes the animation.
     */
    instant(): void;
    /**
     * Returns an array of DataContainer instances that are currently active.
     * @returns An array of DataContainer instances that are currently active.
     */
    getActiveContainers(): DataContainer[];
}
