import { RnaVis } from '../rna-vis';
import { VisibilityRecord } from '../components';
import { IAnimation, AfterFn } from '../animations';
export declare class VisibilityAnim implements IAnimation {
    visibilityRecords: VisibilityRecord[];
    constructor(visibilityRecords: VisibilityRecord[]);
    /**
     * Change the state of the animation to active or not at a given index
     * @param index - Index to change the state of
     * @param isActive - New state of the index
     */
    changeState(index: number, isActive: boolean): void;
    /**
     * Perform a specified step of the animation
     * @param elapsed - A part of the animation to preform
     */
    do(elapsed: number): void;
    /**
     * Reverse the animation.
     */
    reverse(): void;
    /**
     * Preforms the Animation
     * @param rna - RnaVis object on which is preformed the animation
     * @param duration - Duration of the animation
     * @param after - Function to call after the animation completes
     */
    animate(rna: RnaVis, duration: number, after?: AfterFn): void;
    /**
     * Instantly and synchronously completes the animation.
     */
    instant(): void;
    private maxIndex;
}
