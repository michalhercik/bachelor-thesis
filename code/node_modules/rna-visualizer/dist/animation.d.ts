import DataContainer from './dataContainer';
import { Residue, Vector2 } from './rna/data-structures';
import { RNAVis } from './rnavis';
export declare class SingleCoorTarget {
    readonly coor: Vector2;
    constructor(coor: Vector2);
    getX(): number;
    getY(): number;
}
export declare class DoubleCoorTarget {
    readonly coor1: Vector2;
    readonly coor2: Vector2;
    constructor(coor1: Vector2, coor2: Vector2);
    getX1(): number;
    getY1(): number;
    getX2(): number;
    getY2(): number;
}
export declare class RnaPositionRecord {
    readonly labelLines: Map<string, DoubleCoorTarget>;
    readonly labelTexts: Map<string, SingleCoorTarget>;
    readonly residues: Map<string, SingleCoorTarget>;
    constructor(labelLines: Map<string, DoubleCoorTarget>, labelTexts: Map<string, SingleCoorTarget>, residues: Map<string, SingleCoorTarget>);
    static fromDataContainer(container: DataContainer): RnaPositionRecord;
    static fromTemplate(container: DataContainer, template: DataContainer): RnaPositionRecord;
    static fromTranslation(container: DataContainer, shift: Vector2): RnaPositionRecord;
}
declare type BasicFn = () => void;
export interface IAnimation {
    changeState(index: number, isActive: boolean): void;
    do(elapsed: number): void;
    reverse(): void;
    animate(rna: RNAVis, duration: number, after: BasicFn): void;
}
export declare class Animation implements IAnimation {
    container: DataContainer[];
    from: RnaPositionRecord[];
    to: RnaPositionRecord[];
    isActive: boolean[];
    private reversed;
    constructor(container: DataContainer[], to: RnaPositionRecord[]);
    changeState(index: number, isActive: boolean): void;
    changeAllStates(isActive: boolean): void;
    updateFrom(): void;
    setFrom(from: RnaPositionRecord[]): Animation;
    do(elapsed: number): void;
    reverse(): void;
    animate(rna: RNAVis, duration: number, after?: BasicFn): void;
    instant(): void;
    getActiveContainers(): DataContainer[];
}
export declare class VisibilityRecord {
    residues: Residue[];
    to: boolean[];
    active: boolean;
    constructor(residues: Residue[], to: boolean[]);
    setActive(active: boolean): void;
    isActive(): boolean;
}
export declare class VisibilityAnim implements IAnimation {
    visibilityRecords: VisibilityRecord[];
    constructor(visibilityRecords: VisibilityRecord[]);
    changeState(index: number, active: boolean): void;
    do(elapsed: number): void;
    reverse(): void;
    animate(rna: RNAVis, duration: number, after?: BasicFn): void;
    instant(): void;
    private maxIndex;
}
export {};
