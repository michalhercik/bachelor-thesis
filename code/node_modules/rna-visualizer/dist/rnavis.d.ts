import { IRnaInput } from './rnaInput';
import { DataContainer } from './data';
import { Vector2, Residue, PositionRecord, Layer } from './components';
export declare class RnaVis {
    canvas: HTMLCanvasElement;
    readonly layers: Layer[];
    private styles;
    private zoom;
    constructor(canvas: HTMLCanvasElement);
    addZoom(): RnaVis;
    draw(): void;
    drawHoverLabel(x: number, y: number): void;
    addData(data: IRnaInput, name: string, visible?: boolean): void;
    clear(): void;
    align(groupIndex?: number, minGroupSize?: number): Vector2[];
    getAlignmentToTempResidue(tempRes: Residue): PositionRecord[];
    getLayerIndex(name: string): number;
    translate(translations: Vector2[]): RnaVis;
    getDefaultAlpha(): number;
    setAlpha(alpha: number): RnaVis;
    setVisibility(index: number, visibility: boolean): RnaVis;
    setVisibilityByName(name: string, visible: boolean): void;
    setAllVisibility(visible: boolean): RnaVis;
    numberingLabelsVisibility(visible: boolean): void;
    resetPositions(): void;
    getDataContainers(): Array<DataContainer>;
}
