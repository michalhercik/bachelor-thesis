import { IRnaInput } from './rna-input';
import { DataContainer } from './data';
import { Vector2, Residue, Layer } from './components';
/**
 * RNA visualization tool for displaying RNA secondary structures
 * on a canvas element.
 */
export declare class RnaVis {
    /**
     * The canvas element to render the RNA secondary structures on.
     */
    canvas: HTMLCanvasElement;
    /**
     * An array of layers for each RNA secondary structure.
     */
    readonly layers: Layer[];
    /**
     * The styles to use for rendering the RNA secondary structures.
     */
    private styles;
    /**
     * The zoom behavior for the canvas element.
     */
    private zoom;
    /**
     * Constructs a new RnaVis instance with the specified canvas element.
     * @param canvas - The canvas element to render the RNA secondary structures on.
     */
    constructor(canvas: HTMLCanvasElement);
    /**
     * Adds zoom behavior to the canvas element.
     * @returns This RnaVis instance.
     */
    addZoom(): RnaVis;
    /**
     * Renders the RNA secondary structures on the canvas element.
     */
    draw(): void;
    /**
     * Draws the hover label for the specified coordinates.
     * @param x - The x-coordinate of the mouse pointer.
     * @param y - The y-coordinate of the mouse pointer.
     */
    drawHoverLabel(x: number, y: number): void;
    /**
     * Adds a new layer for the specified RNA secondary structure
     * @param data - The input data for the RNA secondary structure.
     * @param name - The name to use for the new layer.
     * @param visible - Whether the new layer should be visible.
     */
    addLayer(data: IRnaInput, name: string, visible?: boolean): RnaVis;
    /**
     * Clears all layers and styles from the RnaVis instance, clears canvas and reset zoom.
     */
    clear(): void;
    /**
     * Creates translation vectors for aligning the RNA secondary structures to the template.
     * @param groupIndex - The index of the generated translation group to use for alignment.
     * @param minGroupSize - The minimum size of a translation group.
     * @returns An array of translation vectors for each RNA secondary structure.
     * @throws An error if the groupIndex is greater than a number of groups.
     */
    align(groupIndex?: number, minGroupSize?: number): Vector2[];
    /**
     * Gets the translation vectors for aligning the RNA secondary structures
     * to the specified template residue.
     * @param tempRes - The template residue to align the RNA secondary structures to.
     * @returns An array of translation vectors for each RNA secondary structure.
     */
    getAlignmentToTempResidue(tempRes: Residue): Vector2[];
    /**
     * Gets the index of the layer with the specified name.
     * @param name - The name of the layer.
     * @returns The index of the layer, or -1 if the layer was not found.
     */
    getLayerIndex(name: string): number;
    /**
     * Translates each RNA secondary structure by the specified vectors.
     * @param translations - An array of translation vectors for each RNA
     * secondary structure.
     * @returns This RnaVis instance.
     * @throws An error if the length of the translations array does not match
     * the number of RNA secondary structures.
     */
    translate(translations: Vector2[]): RnaVis;
    /**
     * Gets the calculated alpha value based on the number of layers for
     * rendering the RNA secondary structures.
     * @returns The calculated alpha value.
     */
    getDefaultAlpha(): number;
    /**
     * Set the global alpha value of the canvas context.
     * @param alpha - A number between 0 and 1 representing the opacity value.
     * @returns The RnaVis instance to allow for method chaining.
     */
    setAlpha(alpha: number): RnaVis;
    /**
     * Set the visibility of a layer by its index.
     * @param index - The index of the layer to modify.
     * @param visibility - A boolean indicating whether the layer should be visible.
     * @returns The RnaVis instance to allow for method chaining.
     */
    setVisibility(index: number, visibility: boolean): RnaVis;
    /**
     * Set the visibility of a layer by its name.
     * @param name - The name of the layer to modify.
     * @param visible - A boolean indicating whether the layer should be visible.
     * @returns The RnaVis instance to allow for method chaining.
     */
    setVisibilityByName(name: string, visible: boolean): RnaVis;
    /**
     * Set the visibility of all layers.
     * @param visible - A boolean indicating whether all layers should be visible.
     * @returns The RnaVis instance to allow for method chaining.
     */
    setAllVisibility(visible: boolean): RnaVis;
    /**
     * Set the visibility of all numbering labels showing the order of residues.
     * @param visible - A boolean indicating whether all numbering labels
     * should be visible.
     * @returns The RnaVis instance to allow for method chaining.
     */
    numberingLabelsVisibility(visible: boolean): RnaVis;
    /**
     * Discards zooming and panning of the canvas.
     * @returns The RnaVis instance to allow for method chaining.
     */
    resetTransform(): RnaVis;
    /**
     * Get an array of DataContainer instances representing the data for each
     * layer.
     * @returns An array of DataContainer instances.
     */
    getDataContainers(): Array<DataContainer>;
}
