import { ILine, Vector2, Transformation } from '../components';
/**
 * A class representing a line segment between two points.
 */
export declare class Line implements ILine {
    private coor1;
    private coor2;
    classes: string[];
    visible: boolean;
    transform: Transformation;
    /**
     * Create a new Line object.
     * @param coor1 - The first coordinate of the line segment.
     * @param coor2 - The second coordinate of the line segment.
     * @param classes - An array of classes for styling the line segment.
     */
    constructor(coor1: Vector2, coor2: Vector2, classes: string[]);
    /**
     * Set the transformation to apply to this line segment.
     * @param transform - The transformation to apply.
     * @returns This line segment, for chaining.
     */
    setTransform(transform: Transformation): Line;
    /**
     * Get the transformed X coordinate of the first point of this line segment.
     * @returns The transformed X coordinate of the first point.
     */
    getTransformedX1(): number;
    /**
     * Get the transformed Y coordinate of the first point of this line segment.
     * @returns The transformed Y coordinate of the first point.
     */
    getTransformedY1(): number;
    /**
     * Get the transformed X coordinate of the second point of this line segment.
     * @returns The transformed X coordinate of the second point.
     */
    getTransformedX2(): number;
    /**
     * Get the transformed Y coordinate of the second point of this line segment.
     * @returns The transformed Y coordinate of the second point.
     */
    getTransformedY2(): number;
    /**
     * Set the X coordinate of the first point of this line segment.
     * @param x1 - The new X coordinate of the first point.
     * @returns This line segment, for chaining.
     */
    setX1(x1: number): Line;
    /**
     * Get the X coordinate of the first point of this line segment.
     * @returns The X coordinate of the first point.
     */
    getX1(): number;
    /**
     * Set the Y coordinate of the first point of this line segment.
     * @param y1 - The new Y coordinate of the first point.
     * @returns This line segment, for chaining.
     */
    setY1(y1: number): Line;
    /**
     * Get the Y coordinate of the first point of this line segment.
     * @returns The Y coordinate of the first point.
     */
    getY1(): number;
    /**
     * Set the X coordinate of the second point of this line segment.
     * @param x2 - The new X coordinate of the second point.
     * @returns This line segment, for chaining.
     */
    setX2(x2: number): Line;
    /**
     * Gets the x-coordinate of the second point of the line.
     */
    getX2(): number;
    /**
     * Sets the Y coordinate of the second point of the line.
     * @param y2 - The new Y coordinate.
     */
    setY2(y2: number): Line;
    /**
     * Gets the Y coordinate of the second point of the line.
     */
    getY2(): number;
    /**
     * Sets the first point of the line to the given Vector2.
     * @param coor - The new coordinates.
     */
    setCoor1(coor: Vector2): Line;
    /**
     * Gets a copy of the first point of the line as a Vector2.
     */
    getCoor1(): Vector2;
    /**
     * Sets the second point of the line to the given Vector2.
     * @param coor - The new coordinates.
     */
    setCoor2(coor: Vector2): Line;
    /**
     * Gets a copy of the second point of the line as a Vector2.
     */
    getCoor2(): Vector2;
    /**
     * Sets the visibility of the line.
     * @param visible - True if the line should be visible, false otherwise.
     */
    setVisible(visible: boolean): Line;
    /**
     * Gets the visibility of the line.
     */
    isVisible(): boolean;
    /**
     * Gets the classes applied to the line.
     */
    getClasses(): string[];
    /**
     * Translates the line by the given Vector2.
     * @param shift - The Vector2 to translate by.
     */
    translate(shift: Vector2): Line;
}
