import { Residue, ILine } from '../components';
import { DataContainer } from '../data';
/**
 * Represents a line between two residues that are mapped to each other.
 */
export declare class MappingLine implements ILine {
    residue1: Residue;
    residue2: Residue;
    classes: string[];
    visible: boolean;
    /**
     * Constructs a MappingLine object
     * @param residue1 - the first residue object
     * @param residue2 - the second residue object
     * @param classes - an array of strings representing the classes of the MappingLine object for styling the line.
     */
    constructor(residue1: Residue, residue2: Residue, classes: string[]);
    /**
     * Gets the transformed X coordinate of the first residue
     * @returns a number representing the transformed X coordinate of the first residue
     */
    getTransformedX1(): number;
    /**
     * Gets the transformed Y coordinate of the first residue
     * @returns a number representing the transformed Y coordinate of the first residue
     */
    getTransformedY1(): number;
    /**
     * Gets the transformed X coordinate of the second residue
     * @returns a number representing the transformed X coordinate of the second residue
     */
    getTransformedX2(): number;
    /**
     * Gets the transformed Y coordinate of the second residue
     * @returns a number representing the transformed Y coordinate of the second residue
     */
    getTransformedY2(): number;
    /**
     * Gets the X coordinate of the first residue
     * @returns a number representing the X coordinate of the first residue
     */
    getX1(): number;
    /**
     * Gets the Y coordinate of the first residue
     * @returns a number representing the Y coordinate of the first residue
     */
    getY1(): number;
    /**
     * Gets the X coordinate of the second residue
     * @returns a number representing the X coordinate of the second residue
     */
    getX2(): number;
    /**
     * Gets the Y coordinate of the second residue
     * @returns a number representing the Y coordinate of the second residue
     */
    getY2(): number;
    /**
     * Sets the visibility of the MappingLine object
     * @param visible - a boolean value representing the visibility of the MappingLine object
     */
    setVisible(visible: boolean): void;
    /**
     * Gets the visibility of the MappingLine object
     * @returns a boolean value representing the visibility of the MappingLine object
     */
    isVisible(): boolean;
    /**
     * Gets an array of strings representing the classes of the MappingLine object
     * @returns an array of strings representing the classes of the MappingLine object
     */
    getClasses(): string[];
    /**
    * Creates MappingLine objects for each residue pair that can be mapped between template and derived container.
    * @param template - The DataContainer representing the template structure.
    * @param container - The DataContainer representing the derived structure.
    * @param classes - (Optional) An array of strings to set as the classes property for each MappingLine object.
    * @returns An array of MappingLine objects representing the residue mappings between template and derived container.
    */
    static createMappingLines(template: DataContainer, container: DataContainer, classes?: string[]): MappingLine[];
}
