import { Vector2, Transformation } from '../components';
/**
 * A class representing a circle.
 */
export declare class Circle {
    private coor;
    radius: number;
    scale: number;
    visible: boolean;
    transform: Transformation;
    /**
     * Creates a new circle.
     * @param coor - The center coordinates of the circle.
     * @param radius - The radius of the circle.
     */
    constructor(coor: Vector2, radius: number);
    /**
     * Sets a transformation for the circle.
     * @param transform - The transformation to set.
     * @returns The circle object.
     */
    setTransform(transform: Transformation): Circle;
    /**
     * Gets the transformed X coordinate of the circle center.
     * @returns The transformed X coordinate.
     */
    getTransformedX(): number;
    /**
     * Gets the X coordinate of the circle center.
     * @returns The X coordinate.
     */
    getX(): number;
    /**
     * Sets the X coordinate of the circle center.
     * @param x - The X coordinate to set.
     * @returns The circle object.
     */
    setX(x: number): Circle;
    /**
     * Gets the transformed Y coordinate of the circle center.
     * @returns The transformed Y coordinate.
     */
    getTransformedY(): number;
    /**
     * Gets the Y coordinate of the circle center.
     * @returns The Y coordinate.
     */
    getY(): number;
    /**
     * Sets the Y coordinate of the circle center.
     * @param y - The Y coordinate to set.
     * @returns The circle object.
     */
    setY(y: number): Circle;
    /**
     * Sets the center coordinates of the circle.
     * @param coor - The center coordinates to set.
     * @returns The circle object.
     */
    setCoor(coor: Vector2): Circle;
    /**
     * Gets the center coordinates of the circle.
     * @returns A copy of the center coordinates as a Vector2 object.
     */
    getCoor(): Vector2;
    /**
     * Gets the transformed center coordinates of the circle.
     * @returns The transformed center coordinates as a Vector2 object.
     */
    getTransformedCoor(): Vector2;
    /**
     * Gets the scaled radius of the circle.
     * @returns The scaled radius.
     */
    getScaledRadius(): number;
    /**
     * Sets the scaling factor of the circle.
     * @param scale - The scaling factor to set.
     * @returns The circle object.
     */
    setScale(scale: number): Circle;
    /**
     * Sets the visibility of the circle.
     * @param visible - The visibility to set.
     * @returns The circle object.
     */
    setVisible(visible: boolean): Circle;
    /**
     * Determines whether the circle is visible.
     * @returns Whether the circle is visible.
     */
    isVisible(): boolean;
    /**
     * Gets the classes associated with the circle.
     * @returns The classes associated with the circle.
     */
    getClasses(): string[];
    /**
     * Translates the circle by the given vector.
     * @param shift - The vector by which to translate the circle.
     * @returns The circle object.
     */
    translate(shift: Vector2): Circle;
}
