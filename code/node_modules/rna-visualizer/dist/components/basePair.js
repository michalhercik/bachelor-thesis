/**
 * Represents a base pair.
 * @implements {ILine}
 */
export class BasePair {
    /**
     * Creates a new instance of BasePair.
     * @param residue1 - The first residue of the base pair.
     * @param residue2 - The second residue of the base pair.
     * @param classes - The classes associated with the base pair.
     */
    constructor(residue1, residue2, classes) {
        this.residue1 = residue1;
        this.residue2 = residue2;
        this.classes = classes;
    }
    /**
     * Gets the x coordinate of the first residue after transformation.
     * @returns The x coordinate of the first residue after transformation.
     */
    getTransformedX1() {
        return this.residue1.getTransformedX();
    }
    /**
     * Gets the y coordinate of the first residue after transformation.
     * @returns The y coordinate of the first residue after transformation.
     */
    getTransformedY1() {
        return this.residue1.getTransformedY();
    }
    /**
     * Gets the x coordinate of the second residue after transformation.
     * @returns The x coordinate of the second residue after transformation.
     */
    getTransformedX2() {
        return this.residue2.getTransformedX();
    }
    /**
     * Gets the y coordinate of the second residue after transformation.
     * @returns The y coordinate of the second residue after transformation.
     */
    getTransformedY2() {
        return this.residue2.getTransformedY();
    }
    /**
     * Gets the x coordinate of the first residue.
     * @returns The x coordinate of the first residue.
     */
    getX1() {
        return this.residue1.getX();
    }
    /**
     * Gets the y coordinate of the first residue.
     * @returns The y coordinate of the first residue.
     */
    getY1() {
        return this.residue1.getY();
    }
    /**
     * Gets the x coordinate of the second residue.
     * @returns The x coordinate of the second residue.
     */
    getX2() {
        return this.residue2.getX();
    }
    /**
     * Gets the y coordinate of the second residue.
     * @returns The y coordinate of the second residue.
     */
    getY2() {
        return this.residue2.getY();
    }
    /**
     * Determines whether the base pair is visible.
     * @returns Whether the base pair is visible.
     */
    isVisible() {
        return this.residue1.isVisible() && this.residue2.isVisible();
    }
    /**
     * Gets the classes associated with the base pair.
     * @returns The classes associated with the base pair.
     */
    getClasses() {
        return this.classes;
    }
}
//# sourceMappingURL=basePair.js.map