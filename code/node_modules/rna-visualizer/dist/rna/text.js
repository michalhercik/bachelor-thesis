import { identity, } from './data-structures';
var Text = /** @class */ (function () {
    function Text(coor, text, classes) {
        this.visible = true;
        this.transform = identity;
        this.classes = classes;
        this.coor = coor;
        this.text = text;
    }
    Text.prototype.setTransform = function (transform) {
        this.transform = transform;
        return this;
    };
    Text.prototype.getTransformedX = function () {
        return this.transform.applyX(this.coor.x);
    };
    Text.prototype.getX = function () {
        return this.coor.x;
    };
    Text.prototype.setX = function (x) {
        this.coor.x = x;
        return this;
    };
    Text.prototype.getTransformedY = function () {
        return this.transform.applyY(this.coor.y);
    };
    Text.prototype.getY = function () {
        return this.coor.y;
    };
    Text.prototype.setY = function (y) {
        this.coor.y = y;
        return this;
    };
    Text.prototype.setCoor = function (coor) {
        this.coor = coor;
        return this;
    };
    Text.prototype.getCoor = function () {
        return this.coor.copy();
    };
    Text.prototype.setVisible = function (visible) {
        this.visible = visible;
        return this;
    };
    Text.prototype.isVisible = function () {
        return this.visible;
    };
    Text.prototype.getText = function () {
        return this.text;
    };
    Text.prototype.getClasses = function () {
        return this.classes;
    };
    Text.prototype.width = function (styles) {
        var textStyles = styles.get(this.classes);
        var fontSize = function () {
            var k = textStyles['k'] || 1;
            return textStyles['font-size'].slice(0, -2) * k + 'px';
        };
        var ctx = document.createElement('canvas').getContext('2d');
        ctx.font =
            (textStyles['font-weight'] || 'normal') + ' ' +
                (fontSize() || '6px') + ' ' +
                (textStyles['font-family'] || 'Helvetica');
        return ctx.measureText(this.text).width;
    };
    Text.prototype.translate = function (shift) {
        this.coor.add(shift);
        return this;
    };
    return Text;
}());
export { Text };
//# sourceMappingURL=text.js.map