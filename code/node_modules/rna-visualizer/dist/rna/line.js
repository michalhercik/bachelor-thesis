import { identity, } from './data-structures';
var Line = /** @class */ (function () {
    function Line(coor1, coor2, classes) {
        this.visible = true;
        this.transform = identity;
        this.coor1 = coor1;
        this.coor2 = coor2;
        this.classes = classes;
    }
    Line.prototype.setTransform = function (transform) {
        this.transform = transform;
        return this;
    };
    Line.prototype.getTransformedX1 = function () {
        return this.transform.applyX(this.coor1.x);
    };
    Line.prototype.getTransformedY1 = function () {
        return this.transform.applyY(this.coor1.y);
    };
    Line.prototype.getTransformedX2 = function () {
        return this.transform.applyX(this.coor2.x);
    };
    Line.prototype.getTransformedY2 = function () {
        return this.transform.applyY(this.coor2.y);
    };
    Line.prototype.setX1 = function (x1) {
        this.coor1.x = x1;
        return this;
    };
    Line.prototype.getX1 = function () {
        return this.coor1.x;
    };
    Line.prototype.setY1 = function (y1) {
        this.coor1.y = y1;
        return this;
    };
    Line.prototype.getY1 = function () {
        return this.coor1.y;
    };
    Line.prototype.setX2 = function (x2) {
        this.coor2.x = x2;
        return this;
    };
    Line.prototype.getX2 = function () {
        return this.coor2.x;
    };
    Line.prototype.setY2 = function (y2) {
        this.coor2.y = y2;
        return this;
    };
    Line.prototype.getY2 = function () {
        return this.coor2.y;
    };
    Line.prototype.setCoor1 = function (coor) {
        this.coor1 = coor;
        return this;
    };
    Line.prototype.getCoor1 = function () {
        return this.coor1.copy();
    };
    Line.prototype.setCoor2 = function (coor) {
        this.coor2 = coor;
        return this;
    };
    Line.prototype.getCoor2 = function () {
        return this.coor2.copy();
    };
    Line.prototype.setVisible = function (visible) {
        this.visible = visible;
        return this;
    };
    Line.prototype.isVisible = function () {
        return this.visible;
    };
    Line.prototype.getClasses = function () {
        return this.classes;
    };
    Line.prototype.translate = function (shift) {
        this.coor1.add(shift);
        this.coor2.add(shift);
        return this;
    };
    return Line;
}());
export { Line };
//# sourceMappingURL=line.js.map