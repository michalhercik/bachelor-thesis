import { Vector2, identity, } from './data-structures';
var Circle = /** @class */ (function () {
    function Circle(coor, radius) {
        this.scale = 1;
        this.visible = true;
        this.transform = identity;
        this.coor = coor;
        this.radius = radius;
    }
    Circle.prototype.setTransform = function (transform) {
        this.transform = transform;
        return this;
    };
    Circle.prototype.getTransformedX = function () {
        return this.transform.applyX(this.coor.x);
    };
    Circle.prototype.getX = function () {
        return this.coor.x;
    };
    Circle.prototype.setX = function (x) {
        this.coor.x = x;
        return this;
    };
    Circle.prototype.getTransformedY = function () {
        return this.transform.applyY(this.coor.y);
    };
    Circle.prototype.getY = function () {
        return this.coor.y;
    };
    Circle.prototype.setY = function (y) {
        this.coor.y = y;
        return this;
    };
    Circle.prototype.setCoor = function (coor) {
        this.coor = coor;
        return this;
    };
    Circle.prototype.getCoor = function () {
        return this.coor.copy();
    };
    Circle.prototype.getTransformedCoor = function () {
        return new Vector2(this.getTransformedX(), this.getTransformedY());
    };
    Circle.prototype.getScaledRadius = function () {
        return this.scale * this.radius;
    };
    Circle.prototype.setScale = function (scale) {
        this.scale = scale;
        return this;
    };
    Circle.prototype.setVisible = function (visible) {
        this.visible = visible;
        return this;
    };
    Circle.prototype.isVisible = function () {
        return this.visible;
    };
    Circle.prototype.getClasses = function () {
        return ['circle'];
    };
    Circle.prototype.translate = function (shift) {
        this.coor.add(shift);
        return this;
    };
    return Circle;
}());
export { Circle };
//# sourceMappingURL=circle.js.map