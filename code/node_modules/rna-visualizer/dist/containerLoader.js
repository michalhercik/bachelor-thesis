var ContainerLoader = /** @class */ (function () {
    function ContainerLoader(container) {
        this.container = container;
    }
    ContainerLoader.prototype.load = function () {
        this.setDimensions();
        this.addBasePairs();
        this.addResidues();
        this.addLabels();
    };
    ContainerLoader.prototype.formCoor = function (num) {
        return num + this.container.margin;
    };
    ContainerLoader.prototype.setDimensions = function () {
        var residues = this.container.data.rnaComplexes[0].rnaMolecules[0].sequence;
        var width = Number.MIN_VALUE;
        var height = Number.MIN_VALUE;
        for (var _i = 0, residues_1 = residues; _i < residues_1.length; _i++) {
            var res = residues_1[_i];
            if (res.x > width)
                width = res.x;
            if (res.y > height)
                height = res.y;
        }
        this.container.width = Math.round(2 * this.container.margin + width);
        this.container.height = Math.round(2 * this.container.margin + height);
    };
    ContainerLoader.prototype.addClasses = function () {
        var _this = this;
        this.container.data.classes.forEach(function (style) {
            var name = style.name;
            delete style.name;
            _this.container.styles.set(name, style);
        });
    };
    ContainerLoader.prototype.addBasePairs = function () {
        var _this = this;
        var rna = this.container.data.rnaComplexes[0].rnaMolecules[0];
        var bpX = function (resIndex) { return _this.formCoor(rna.sequence[resIndex].x); };
        var bpY = function (resIndex) { return _this.formCoor(rna.sequence[resIndex].y); };
        this.container.container.selectAll('custom.bp-line')
            .data(rna.basePairs)
            .join('custom')
            .attr('x1', function (bp) { return bpX(bp.residueIndex1); })
            .attr('y1', function (bp) { return bpY(bp.residueIndex1); })
            .attr('x2', function (bp) { return bpX(bp.residueIndex2); })
            .attr('y2', function (bp) { return bpY(bp.residueIndex2); })
            .attr('class', function (bp) {
            var c = bp.classes.join(' ') + ' line';
            _this.container.classComb.line.add(c);
            return c;
        });
    };
    ContainerLoader.prototype.addResidues = function () {
        var _this = this;
        var sequenceData = this.container.data.rnaComplexes[0].rnaMolecules[0].sequence;
        var getX = function (res) { return _this.formCoor(res.x); };
        var getY = function (res) { return _this.formCoor(res.y); };
        var addLines = function () {
            var lineData = [];
            for (var i = 1; i < sequenceData.length; ++i) {
                lineData.push({
                    res1: sequenceData[i - 1],
                    res2: sequenceData[i],
                });
            }
            _this.container.container.selectAll('custom.res-line')
                .data(lineData)
                .join('custom')
                .attr('x1', function (line) { return getX(line.res1); })
                .attr('y1', function (line) { return getY(line.res1); })
                .attr('x2', function (line) { return getX(line.res2); })
                .attr('y2', function (line) { return getY(line.res2); })
                .attr('class', 'bp-line res-line line');
            _this.container.classComb.line.add('bp-line res-line line');
        };
        var addCircles = function () {
            _this.container.container.selectAll('custom.res-circle')
                .data(sequenceData)
                .join('custom')
                .attr('cx', getX)
                .attr('cy', getY)
                .attr('r', _this.container.styles.getProperty('font', 'font-size').slice(0, -2) * 0.75)
                .attr('class', 'res-circle circle');
            _this.container.classComb.circle.add('res-circle circle');
        };
        var addTitles = function () {
            var resTitle = function (residue) {
                return "".concat(residue.residueIndex, " (position.label in template: ").concat(residue.residueIndex, ".").concat(residue.residueName, "')");
            };
            _this.container.container.selectAll('custom.res-title')
                .data(sequenceData)
                .join('custom')
                .attr('title', resTitle)
                .attr('x', getX)
                .attr('y', getY)
                .attr('text', function (residue) { return residue.residueName; })
                .attr('class', function (residue) {
                var c = residue.classes.join(' ') + ' res-title label transform';
                _this.container.classComb.text.add(c);
                return c;
            });
        };
        addLines();
        addCircles();
        addTitles();
    };
    ContainerLoader.prototype.addLabels = function () {
        var _this = this;
        var labelData = this.container.data.rnaComplexes[0].rnaMolecules[0].labels;
        this.container.container.selectAll('custom.label-text')
            .data(labelData)
            .join('custom')
            .attr('text', function (label) { return label.labelContent.label; })
            .attr('x', function (label) { return _this.formCoor(label.labelContent.x); })
            .attr('y', function (label) { return _this.formCoor(label.labelContent.y); })
            .attr('class', function (label) {
            var c = label.labelContent.classes.join(' ') + ' label-text label transform';
            _this.container.classComb.text.add(c);
            return c;
        });
        this.container.container.selectAll('custom.label-line')
            .data(labelData)
            .join('custom')
            .attr('x1', function (label) { return _this.formCoor(label.labelLine.x1); })
            .attr('x2', function (label) { return _this.formCoor(label.labelLine.x2); })
            .attr('y1', function (label) { return _this.formCoor(label.labelLine.y1); })
            .attr('y2', function (label) { return _this.formCoor(label.labelLine.y2); })
            .attr('class', function (label) {
            var c = label.labelLine.classes.join(' ') + ' label-line line';
            _this.container.classComb.line.add(c);
            return c;
        });
    };
    return ContainerLoader;
}());
export default ContainerLoader;
