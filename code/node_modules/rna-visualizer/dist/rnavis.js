import * as d3 from 'd3';
import { Styles } from './styles';
import { Draw } from './draw';
import { ContainerFactory, TranslationGroups, } from './data';
import { Title, Vector2, MappingLine, PositionRecord, Layer, } from './components';
var RnaVis = /** @class */ (function () {
    function RnaVis(canvas) {
        this.styles = new Styles();
        this.layers = new Array();
        this.zoom = d3.zoom();
        this.canvas = canvas;
    }
    RnaVis.prototype.addZoom = function () {
        var _this = this;
        this.zoom
            .scaleExtent([0, 10])
            .on('zoom', function (event) {
            _this.layers.forEach(function (layer) { return layer.data.update(event); });
            _this.draw();
        });
        d3.select(this.canvas).call(this.zoom);
        return this;
    };
    RnaVis.prototype.draw = function () {
        var _this = this;
        var ctx = this.canvas.getContext('2d');
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        this.layers.forEach(function (layer) {
            if (layer.visible) {
                Draw.Lines(layer.data.getLines(), ctx, layer.data.styles);
                Draw.Lines(layer.mappingLines, ctx, _this.styles);
            }
        });
        this.layers.forEach(function (layer) {
            if (layer.visible) {
                Draw.Circles(layer.data.getCircles(), ctx, layer.data.styles);
            }
        });
        this.layers.forEach(function (layer) {
            if (layer.visible) {
                Draw.Texts(layer.data.getText(), ctx, layer.data.styles);
            }
        });
    };
    RnaVis.prototype.drawHoverLabel = function (x, y) {
        var residues = this.layers
            .filter(function (layer) { return layer.visible; })
            .map(function (layer) { return layer.data.getResByCoor(x, y); })
            .filter(function (res) { return res !== null; });
        if (residues.length > 0) {
            var title = Title.fromResidues(residues, this.canvas.width, this.canvas.height, this.styles);
            var ctx = this.canvas.getContext('2d');
            title.draw(ctx);
        }
    };
    RnaVis.prototype.addData = function (data, name, visible) {
        if (visible === void 0) { visible = true; }
        this.styles.addFrom(data.classes);
        var cont = new ContainerFactory().create(data, this.styles);
        var mappingLines = [];
        if (this.layers.length > 0) {
            var mappingName = name + 'mapping-line';
            var color = Styles.randomHexColor();
            this.styles.set(mappingName, { stroke: color });
            mappingLines = MappingLine.createMappingLines(this.layers[0].data, cont, [mappingName]);
        }
        var newLayer = new Layer(cont, name, mappingLines, visible);
        this.layers.push(newLayer);
        var alpha = this.getDefaultAlpha();
        this.setAlpha(alpha);
    };
    RnaVis.prototype.clear = function () {
        this.styles.reset();
        this.layers.length = 0;
        this.resetPositions();
        var ctx = this.canvas.getContext('2d');
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    };
    RnaVis.prototype.align = function (groupIndex, minGroupSize) {
        if (groupIndex === void 0) { groupIndex = -1; }
        if (minGroupSize === void 0) { minGroupSize = 5; }
        var shifts = [new Vector2(0, 0)];
        if (this.layers.length < 2) {
            return shifts;
        }
        var layers = this.layers;
        var containers = this.getDataContainers();
        var groups = TranslationGroups.create(containers[0], containers[1], null, minGroupSize);
        if (groupIndex >= groups.length) {
            return shifts;
        }
        var group = groupIndex == -1 ? TranslationGroups.getBest(groups) : groups[groupIndex];
        if (group) {
            shifts.push(new Vector2(group.xShift, group.yShift));
            for (var i = 2; i < layers.length; ++i) {
                groups = TranslationGroups.create(layers[0].data, layers[i].data, group);
                if (groups.length > 0) {
                    var bestGroup = TranslationGroups.getBest(groups);
                    shifts.push(new Vector2(bestGroup.xShift, bestGroup.yShift));
                }
                else {
                    groups = TranslationGroups.create(layers[0].data, layers[i].data);
                    var bestGroup = TranslationGroups.getBest(groups);
                    shifts.push(new Vector2(bestGroup.xShift, bestGroup.yShift));
                }
            }
        }
        return shifts;
    };
    RnaVis.prototype.getAlignmentToTempResidue = function (tempRes) {
        var animTargets = [];
        var containers = this.getDataContainers();
        for (var i = 1; i < containers.length; ++i) {
            var residue = containers[i].residues.find(function (res) { return res.templateIndex === tempRes.index; });
            if (residue) {
                var shift = Vector2.subtraction(tempRes.getCoor(), residue.getCoor());
                animTargets.push(PositionRecord.fromTranslation(containers[i], shift));
            }
            else {
                animTargets.push(PositionRecord.fromDataContainer(containers[i]));
            }
        }
        return animTargets;
    };
    RnaVis.prototype.getLayerIndex = function (name) {
        return this.layers
            .map(function (layer) { return layer.name; })
            .indexOf(name);
    };
    RnaVis.prototype.translate = function (translations) {
        if (translations.length !== this.layers.length) {
            throw new Error('translations.length !== this.layers.length');
        }
        else {
            this.layers.forEach(function (layer, index) { return layer.data.translate(translations[index]); });
        }
        return this;
    };
    RnaVis.prototype.getDefaultAlpha = function () {
        var visibleCount = this.layers.filter(function (l) { return l.visible; }).length;
        visibleCount = visibleCount === 0 ? 1 : visibleCount;
        var alpha = 1 / visibleCount;
        return alpha;
    };
    RnaVis.prototype.setAlpha = function (alpha) {
        this.canvas.getContext('2d').globalAlpha = alpha;
        return this;
    };
    RnaVis.prototype.setVisibility = function (index, visibility) {
        this.layers[index].visible = visibility;
        return this;
    };
    RnaVis.prototype.setVisibilityByName = function (name, visible) {
        var index = this.getLayerIndex(name);
        if (index > -1) {
            this.setVisibility(index, visible);
        }
    };
    RnaVis.prototype.setAllVisibility = function (visible) {
        this.layers.forEach(function (layer) { return layer.visible = visible; });
        return this;
    };
    RnaVis.prototype.numberingLabelsVisibility = function (visible) {
        this.layers
            .map(function (layer) { return layer.data.labels; })
            .flat(1)
            .forEach(function (label) { return label.setVisible(visible); });
    };
    RnaVis.prototype.resetPositions = function () {
        d3.select(this.canvas)
            .call(this.zoom.transform, d3.zoomIdentity);
    };
    RnaVis.prototype.getDataContainers = function () {
        return this.layers.map(function (layer) { return layer.data; });
    };
    return RnaVis;
}());
export { RnaVis };
//# sourceMappingURL=rnaVis.js.map