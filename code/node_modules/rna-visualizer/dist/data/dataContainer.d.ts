import { Label, BasePair, Residue, ILine, Text, Circle, Vector2 } from '../components';
import { Styles } from '../styles';
/**
 * Represents a container that holds data for rendering a visualization.
 */
export declare class DataContainer {
    readonly styles: Styles;
    width: number;
    height: number;
    residues: Residue[];
    basePairs: BasePair[];
    labels: Label[];
    /**
     * Initializes a new instance of the DataContainer class.
     * @param residues - The residues to render.
     * @param basePairs - The base pairs to render.
     * @param labels - The labels to render.
     * @param styles - The styles to apply.
     */
    constructor(residues: Residue[], basePairs: BasePair[], labels: Label[], styles: Styles);
    /**
     * Gets an array of ILine objects that represent the lines to render.
     * @returns An array of ILine objects.
     */
    getLines(): ILine[];
    /**
     * Gets an array of Text objects that represent the text to render.
     * @returns An array of Text objects.
     */
    getText(): Text[];
    /**
     * Gets an array of Circle objects that represent the circles to render.
     * @returns An array of Circle objects.
     */
    getCircles(): Circle[];
    /**
     * Updates the visualization with the specified event.
     * @param event - The event to use for the update.
     */
    update(event: any): void;
    /**
     * Gets the residue at the specified coordinates.
     * @param x - The x-coordinate.
     * @param y - The y-coordinate.
     * @returns The residue at the specified coordinates, or null if no such residue exists.
     */
    getResByCoor(x: number, y: number): Residue;
    /**
     * Gets the closest residue to the specified coordinates within the specified maximum distance.
     * @param x - The x-coordinate.
     * @param y - The y-coordinate.
     * @param maxDistance - The maximum distance from the specified coordinates.
     * @returns The closest residue to the specified coordinates within the specified maximum distance, or null if no such residue exists.
     */
    getClosestResByCoor(x: number, y: number, maxDistance?: number): Residue;
    /**
     * Gets an array of residues that cannot be mapped to a template.
     * @returns An array of unmappable residues.
     */
    getUnmappableResidues(): Residue[];
    /**
     * Gets an array of residues that can be mapped to a template.
     * @returns An array of mappable residues.
     */
    getMappableResidues(): Residue[];
    /**
     * Translates the objects by the specified amount.
     * @param shift - The amount to translate the visualization.
     */
    translate(shift: Vector2): void;
}
