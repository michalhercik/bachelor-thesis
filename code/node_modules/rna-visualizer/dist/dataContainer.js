import * as d3 from 'd3';
import { Vector2 } from './rna/data-structures';
import { Styles } from './classes';
var DataContainer = /** @class */ (function () {
    function DataContainer(residues, basePairs, labels, styles) {
        this.residues = residues;
        this.basePairs = basePairs;
        this.labels = labels;
        this.styles = styles;
    }
    DataContainer.prototype.getLines = function () {
        return this.basePairs
            .concat(this.labels.map(function (l) { return l.line; }));
    };
    DataContainer.prototype.getText = function () {
        return (this.residues.map(function (r) { return r.text; }))
            .concat(this.labels.map(function (l) { return l.text; }));
    };
    DataContainer.prototype.getCircles = function () {
        return this.residues.map(function (r) { return r.circle; });
    };
    DataContainer.prototype.update = function (event) {
        var width = this.width;
        var height = this.height;
        var x = d3.scaleLinear().domain([0, width]).range([0, width]);
        var y = d3.scaleLinear().domain([0, height]).range([0, height]);
        x.range([0, width].map(function (d) { return event.transform.applyX(d); }));
        y.range([0, height].map(function (d) { return event.transform.applyY(d); }));
        var transform = { applyX: x, applyY: y };
        this.residues.forEach(function (res) {
            res.setTransform(transform);
            res.circle.setScale(event.transform.k);
        });
        this.labels.forEach(function (label) {
            label.setTransform(transform);
        });
        this.basePairs.forEach(function (bp) {
            bp.setTransform(transform);
        });
        this.styles.set(Styles.TRANSFORMED_CLASS, { k: event.transform.k });
    };
    DataContainer.prototype.getResByCoor = function (x, y) {
        var _this = this;
        var result = null;
        this.residues.find(function (res) {
            var resStyles = _this.styles.get(res.getClasses());
            var k = resStyles['k'] || 1;
            var shift = (+resStyles['font-size'].slice(0, -2) || 7) * k / 2;
            if (x >= res.getTransformedX() - shift
                && x <= res.getTransformedX() + shift
                && y >= res.getTransformedY() - shift
                && y <= res.getTransformedY() + shift) {
                result = res;
            }
        });
        return result;
    };
    DataContainer.prototype.getClosestResByCoor = function (x, y, maxDistance) {
        if (maxDistance === void 0) { maxDistance = 100; }
        var result = null;
        var resultDistance = Number.MAX_SAFE_INTEGER;
        var clickPosition = new Vector2(x, y);
        this.residues.forEach(function (res) {
            var resCoor = res.getTransformedCoor();
            var distance = Vector2.distance(clickPosition, resCoor);
            if (distance < resultDistance) {
                result = res;
                resultDistance = distance;
            }
        });
        result = resultDistance <= maxDistance ? result : null;
        return result;
    };
    DataContainer.prototype.getUnmappableResidues = function () {
        return this.residues.filter(function (res) { return res.templateIndex === -1; });
    };
    DataContainer.prototype.getMappableResidues = function () {
        return this.residues.filter(function (res) { return res.templateIndex !== -1; });
    };
    DataContainer.prototype.translate = function (shift) {
        this.residues.forEach(function (res) {
            res.translate(shift);
        });
        this.labels.forEach(function (label) {
            label.translate(shift);
        });
    };
    return DataContainer;
}());
export default DataContainer;
//# sourceMappingURL=dataContainer.js.map