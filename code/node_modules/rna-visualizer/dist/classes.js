var BLACK = 'rgb(0, 0, 0)';
var WHITE = 'rgb(255,255,255)';
var RED = 'rgb(255, 0, 255)';
var GREEN = 'rgb(0, 255, 0)';
var BLUE = 'rgb(0, 0, 255)';
var GRAY = 'rgb(204, 204, 204)';
var BROWN = 'rgb(211.65, 104.55, 30.6)';
var Styles = /** @class */ (function () {
    function Styles() {
        this.default = new Map([
            ['text-black', { fill: BLACK }],
            ['text-red', { fill: RED }],
            ['text-green', { fill: GREEN }],
            ['text-blue', { fill: BLUE }],
            ['text-gray', { fill: GRAY }],
            ['text-brown', { fill: BROWN }],
            ['text', {
                    fill: BLACK,
                    'text-anchor': 'middle',
                    baseline: 'middle'
                }],
            ['circle-black', {
                    stroke: BLACK,
                    fill: 'none'
                }],
            ['circle-red', {
                    stroke: RED,
                    fill: 'none'
                }],
            ['circle-green', {
                    stroke: GREEN,
                    fill: 'none'
                }],
            ['circle-blue', {
                    stroke: BLUE,
                    fill: 'none'
                }],
            ['circle-gray', {
                    stroke: GRAY,
                    fill: 'none'
                }],
            ['circle-brown', {
                    stroke: BROWN,
                    fill: 'none'
                }],
            ['circle', { stroke: BLACK }],
            ['numbering-label', { fill: GRAY }],
            ['numbering-line', { stroke: GRAY }],
            ['template', { visibility: 'hidden' }],
            ['bp-line', { stroke: BLACK }],
            ['residue-circle', { fill: WHITE }],
            ['res-line', { stroke: GRAY }],
            ['mapping-line', { stroke: 'yellow' }],
            ['title-text', {
                    fill: 'black',
                    baseline: 'top',
                    alpha: 1,
                    'text-anchor': 'start',
                    'font-size': '11px',
                    'font-weight': 'normal',
                    'font-family': 'Helvetica'
                }],
            ['title-background', {
                    stroke: WHITE,
                    fill: WHITE,
                    alpha: 1
                }]
        ]);
        this.styles = new Map(this.default);
    }
    Styles.prototype.addFrom = function (classes) {
        var _this = this;
        classes.forEach(function (style) {
            var name = style.name;
            _this.styles.set(name, style);
        });
    };
    Styles.prototype.set = function (name, value) {
        var v = this.get([name]);
        if (v)
            Object.assign(v, value);
        this.styles.set(name, value);
    };
    Styles.prototype.get = function (names) {
        var _this = this;
        var returnStyles = {};
        names.forEach(function (n) { return Object.assign(returnStyles, _this.styles.get(n)); });
        return returnStyles;
    };
    Styles.prototype.getProperty = function (names, property) {
        var returnStyles = this.get(names);
        return returnStyles[property];
    };
    Styles.prototype.reset = function () {
        this.styles = new Map(this.default);
    };
    Styles.TRANSFORMED_CLASS = 'transform';
    return Styles;
}());
export { Styles };
//# sourceMappingURL=classes.js.map